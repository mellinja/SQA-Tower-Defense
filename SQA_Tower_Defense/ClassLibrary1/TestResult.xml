<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\ClassLibrary1\ClassTests.csproj" total="98" errors="9" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2011-05-11" time="15:18:40">
  <environment nunit-version="2.5.9.10348" clr-version="2.0.50727.3620" os-version="Microsoft Windows NT 5.1.2600 Service Pack 3" platform="Win32NT" cwd="C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\ClassLibrary1" machine-name="MELLINJA-1" user="mellinja" user-domain="MELLINJA-1" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="Project" name="C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\ClassLibrary1\ClassTests.csproj" executed="True" result="Failure" success="False" time="1.172" asserts="0">
    <results>
      <test-suite type="Assembly" name="C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\ClassLibrary1\bin\Debug\ClassLibrary1.dll" executed="True" result="Failure" success="False" time="1.156" asserts="0">
        <results>
          <test-suite type="Namespace" name="ClassTests" executed="True" result="Failure" success="False" time="1.156" asserts="0">
            <results>
              <test-suite type="TestFixture" name="CastleTests" executed="True" result="Success" success="True" time="0.219" asserts="0">
                <results>
                  <test-case name="ClassTests.CastleTests.castleCanBeDestroyed" executed="True" result="Success" success="True" time="0.109" asserts="2" />
                  <test-case name="ClassTests.CastleTests.castleCanBeDestroyedStopsAll" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.CastleTests.CastleInitTest" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.CastleTests.CastleInitTestBadLocation" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="ClassTests.CastleTests.CastleInitTestHealth0" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="ClassTests.CastleTests.CastleInitTestHealthNegative" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="CellTests" executed="True" result="Success" success="True" time="0.000" asserts="0">
                <results>
                  <test-case name="ClassTests.CellTests.CellHasOccupied" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.CellTests.CellInitializes" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="EnemyMovementTestsWithCastle" executed="False" result="Ignored">
                <reason>
                  <message><![CDATA[]]></message>
                </reason>
              </test-suite>
              <test-suite type="TestFixture" name="EnemyTests" executed="True" result="Success" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="ClassTests.EnemyTests.EnemyHasCorrectGoldAfterInitialized" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.EnemyTests.EnemyHasCorrectHealthAfterDamaged" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.EnemyTests.EnemyHasCorrectHealthAfterInitialized" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.EnemyTests.EnemyHasCorrectSpeedAfterInitialized" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                  <test-case name="ClassTests.EnemyTests.EnemyHasCorrectSpeedAfterModified" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.EnemyTests.EnemyHasCorrectTypeAfterModified" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.EnemyTests.EnemyInitializesSuccessfully" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.EnemyTests.testEnemyThrowsExceptioOnInvalidType" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="ClassTests.EnemyTests.testEnemyThrowsExceptioOnNegativeGold" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="ClassTests.EnemyTests.testEnemyThrowsExceptioOnNegativeHealth" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="ClassTests.EnemyTests.testEnemyThrowsExceptioOnNegativeSpeed" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="ClassTests.EnemyTests.testEnemyThrowsExceptioOnNullArea" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="ClassTests.EnemyTests.testEnemyThrowsExceptioOnZeroGold" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="ClassTests.EnemyTests.testEnemyThrowsExceptioOnZeroHealth" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="ClassTests.EnemyTests.testEnemyThrowsExceptioOnZeroSpeed" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MainGameTests" executed="True" result="Failure" success="False" time="0.781" asserts="0">
                <results>
                  <test-case name="ClassTests.MainGameTests.ClickingEmptySpaceWhenSelectingTowerPlacesTower" executed="True" result="Error" success="False" time="0.391" asserts="0">
                    <failure>
                      <message><![CDATA[System.ArgumentNullException : The GraphicsDevice must not be null when creating new resources.
Parameter name: graphicsDevice]]></message>
                      <stack-trace><![CDATA[at Microsoft.Xna.Framework.Graphics.SpriteBatch..ctor(GraphicsDevice graphicsDevice)
at SQA_Tower_Defense.MainGame.LoadContent() in C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\SQA_Tower_Defense\SQA_Tower_Defense\MainGame.cs:line 76
at SQA_Tower_Defense.MainGame.LoadContent(Int32 i) in C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\SQA_Tower_Defense\SQA_Tower_Defense\MainGame.cs:line 63
at ClassTests.MainGameTests.ClickingEmptySpaceWhenSelectingTowerPlacesTower() in C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\ClassLibrary1\MainGameTests.cs:line 127
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="ClassTests.MainGameTests.ClickingNewTowerSelectsCorrectTower" executed="True" result="Error" success="False" time="0.078" asserts="0">
                    <failure>
                      <message><![CDATA[System.ArgumentNullException : The GraphicsDevice must not be null when creating new resources.
Parameter name: graphicsDevice]]></message>
                      <stack-trace><![CDATA[at Microsoft.Xna.Framework.Graphics.SpriteBatch..ctor(GraphicsDevice graphicsDevice)
at SQA_Tower_Defense.MainGame.LoadContent() in C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\SQA_Tower_Defense\SQA_Tower_Defense\MainGame.cs:line 76
at SQA_Tower_Defense.MainGame.LoadContent(Int32 i) in C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\SQA_Tower_Defense\SQA_Tower_Defense\MainGame.cs:line 63
at ClassTests.MainGameTests.ClickingNewTowerSelectsCorrectTower() in C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\ClassLibrary1\MainGameTests.cs:line 116
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="ClassTests.MainGameTests.ClickingNewTowerSelectsNewTower" executed="True" result="Error" success="False" time="0.031" asserts="0">
                    <failure>
                      <message><![CDATA[System.ArgumentNullException : The GraphicsDevice must not be null when creating new resources.
Parameter name: graphicsDevice]]></message>
                      <stack-trace><![CDATA[at Microsoft.Xna.Framework.Graphics.SpriteBatch..ctor(GraphicsDevice graphicsDevice)
at SQA_Tower_Defense.MainGame.LoadContent() in C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\SQA_Tower_Defense\SQA_Tower_Defense\MainGame.cs:line 76
at SQA_Tower_Defense.MainGame.LoadContent(Int32 i) in C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\SQA_Tower_Defense\SQA_Tower_Defense\MainGame.cs:line 63
at ClassTests.MainGameTests.ClickingNewTowerSelectsNewTower() in C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\ClassLibrary1\MainGameTests.cs:line 104
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="ClassTests.MainGameTests.GameInitializesSuccessfully" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                  <test-case name="ClassTests.MainGameTests.LoadContentInitializesEverythingSuccessfully" executed="True" result="Error" success="False" time="0.016" asserts="0">
                    <failure>
                      <message><![CDATA[System.ArgumentNullException : The GraphicsDevice must not be null when creating new resources.
Parameter name: graphicsDevice]]></message>
                      <stack-trace><![CDATA[at Microsoft.Xna.Framework.Graphics.SpriteBatch..ctor(GraphicsDevice graphicsDevice)
at SQA_Tower_Defense.MainGame.LoadContent() in C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\SQA_Tower_Defense\SQA_Tower_Defense\MainGame.cs:line 76
at SQA_Tower_Defense.MainGame.LoadContent(Int32 i) in C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\SQA_Tower_Defense\SQA_Tower_Defense\MainGame.cs:line 63
at ClassTests.MainGameTests.LoadContentInitializesEverythingSuccessfully() in C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\ClassLibrary1\MainGameTests.cs:line 59
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="ClassTests.MainGameTests.LoadContentInitializesSpriteBatchSuccessfully" executed="True" result="Error" success="False" time="0.016" asserts="0">
                    <failure>
                      <message><![CDATA[System.ArgumentNullException : The GraphicsDevice must not be null when creating new resources.
Parameter name: graphicsDevice]]></message>
                      <stack-trace><![CDATA[at Microsoft.Xna.Framework.Graphics.SpriteBatch..ctor(GraphicsDevice graphicsDevice)
at SQA_Tower_Defense.MainGame.LoadContent() in C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\SQA_Tower_Defense\SQA_Tower_Defense\MainGame.cs:line 76
at SQA_Tower_Defense.MainGame.LoadContent(Int32 i) in C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\SQA_Tower_Defense\SQA_Tower_Defense\MainGame.cs:line 63
at ClassTests.MainGameTests.LoadContentInitializesSpriteBatchSuccessfully() in C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\ClassLibrary1\MainGameTests.cs:line 43
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="ClassTests.MainGameTests.LoadContentLoadsFontSuccessfully" executed="True" result="Error" success="False" time="0.078" asserts="0">
                    <failure>
                      <message><![CDATA[System.ArgumentNullException : The GraphicsDevice must not be null when creating new resources.
Parameter name: graphicsDevice]]></message>
                      <stack-trace><![CDATA[at Microsoft.Xna.Framework.Graphics.SpriteBatch..ctor(GraphicsDevice graphicsDevice)
at SQA_Tower_Defense.MainGame.LoadContent() in C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\SQA_Tower_Defense\SQA_Tower_Defense\MainGame.cs:line 76
at SQA_Tower_Defense.MainGame.LoadContent(Int32 i) in C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\SQA_Tower_Defense\SQA_Tower_Defense\MainGame.cs:line 63
at ClassTests.MainGameTests.LoadContentLoadsFontSuccessfully() in C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\ClassLibrary1\MainGameTests.cs:line 51
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="ClassTests.MainGameTests.LoadContentLoadsMouseStatusSuccessfully" executed="True" result="Error" success="False" time="0.062" asserts="0">
                    <failure>
                      <message><![CDATA[System.ArgumentNullException : The GraphicsDevice must not be null when creating new resources.
Parameter name: graphicsDevice]]></message>
                      <stack-trace><![CDATA[at Microsoft.Xna.Framework.Graphics.SpriteBatch..ctor(GraphicsDevice graphicsDevice)
at SQA_Tower_Defense.MainGame.LoadContent() in C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\SQA_Tower_Defense\SQA_Tower_Defense\MainGame.cs:line 76
at SQA_Tower_Defense.MainGame.LoadContent(Int32 i) in C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\SQA_Tower_Defense\SQA_Tower_Defense\MainGame.cs:line 63
at ClassTests.MainGameTests.LoadContentLoadsMouseStatusSuccessfully() in C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\ClassLibrary1\MainGameTests.cs:line 35
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="ClassTests.MainGameTests.Pressing1SelectsCorrectTower" executed="True" result="Error" success="False" time="0.047" asserts="0">
                    <failure>
                      <message><![CDATA[System.ArgumentNullException : The GraphicsDevice must not be null when creating new resources.
Parameter name: graphicsDevice]]></message>
                      <stack-trace><![CDATA[at Microsoft.Xna.Framework.Graphics.SpriteBatch..ctor(GraphicsDevice graphicsDevice)
at SQA_Tower_Defense.MainGame.LoadContent() in C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\SQA_Tower_Defense\SQA_Tower_Defense\MainGame.cs:line 76
at SQA_Tower_Defense.MainGame.LoadContent(Int32 i) in C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\SQA_Tower_Defense\SQA_Tower_Defense\MainGame.cs:line 63
at ClassTests.MainGameTests.Pressing1SelectsCorrectTower() in C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\ClassLibrary1\MainGameTests.cs:line 91
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="ClassTests.MainGameTests.Pressing1SelectsNewTower" executed="True" result="Error" success="False" time="0.016" asserts="0">
                    <failure>
                      <message><![CDATA[System.ArgumentNullException : The GraphicsDevice must not be null when creating new resources.
Parameter name: graphicsDevice]]></message>
                      <stack-trace><![CDATA[at Microsoft.Xna.Framework.Graphics.SpriteBatch..ctor(GraphicsDevice graphicsDevice)
at SQA_Tower_Defense.MainGame.LoadContent() in C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\SQA_Tower_Defense\SQA_Tower_Defense\MainGame.cs:line 76
at SQA_Tower_Defense.MainGame.LoadContent(Int32 i) in C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\SQA_Tower_Defense\SQA_Tower_Defense\MainGame.cs:line 63
at ClassTests.MainGameTests.Pressing1SelectsNewTower() in C:\Documents and Settings\mellinja\SQA-Tower-Defense\SQA-Tower-Defense\SQA_Tower_Defense\ClassLibrary1\MainGameTests.cs:line 80
]]></stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MapTests" executed="True" result="Success" success="True" time="0.062" asserts="0">
                <results>
                  <test-case name="ClassTests.MapTests.EnemiesGetAddedToListWhenSpawned" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="ClassTests.MapTests.EnemiesGetRemovedFromListWhenKilled" executed="True" result="Success" success="True" time="0.016" asserts="0" />
                  <test-case name="ClassTests.MapTests.EnemiesNotInListThatGetKilledCrashGame" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="ClassTests.MapTests.InsufficientFundsRejectTowerPlacement" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.MapTests.LoadedStateHasCorrectLastEnemy" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.MapTests.LoadedStateHasCorrectMoneyAmount" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.MapTests.LoadedStateHasCorrectTowerCount" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.MapTests.LoadedStatesDoChangeStateOfMap" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.MapTests.LoadedStatesDoNotLoadIfThereIsNoPreviousStates" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.MapTests.MapInitializes" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.MapTests.MoneyDecreasesWhenTowerIsPlaced" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.MapTests.MoneyIncreasesWhenEnemyIsKilled" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.MapTests.MoneyIncreasesWhenTowerIsSold" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.MapTests.SavedStateLastStateHasCorrectEnemy" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.MapTests.SavedStateLastStateHasCorrectEnemyCount" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.MapTests.SaveStateListIsNotNullWhenMapInitializes" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.MapTests.SaveStateNextStateAddsNewStateToList" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.MapTests.SaveStateOneSavedStateHasCorrectTowerList" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.MapTests.SaveStateOneSaveStateHasCorrectMoneyCount" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.MapTests.SaveStateOneSaveStateHasCorrectScoreAmount" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.MapTests.SaveStateTwoSavedStatesDoNotHaveIncorrectTowerList" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.MapTests.SaveStateTwoSavedStatesHaveCorrectTowerList" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.MapTests.test0Difficulty" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="ClassTests.MapTests.testMapInvalidGameType" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="ClassTests.MapTests.testMapNegativeMoney" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="ClassTests.MapTests.testNegativeDifficulty" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="ClassTests.MapTests.testTooHighDifficulty" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="ClassTests.MapTests.TowersCannotBePlacedOnTopOfAnotherTower" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.MapTests.TowersGetAddedToListWhenPlaced" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.MapTests.TowersGetRemovedFromListWhenSold" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="TowerTestInteractionWithEnemiesWithsetup" executed="True" result="Success" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="ClassTests.TowerTestInteractionWithEnemiesWithsetup.attackEvery60" executed="True" result="Success" success="True" time="0.000" asserts="61" />
                  <test-case name="ClassTests.TowerTestInteractionWithEnemiesWithsetup.EnemyDestroyed" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="ClassTests.TowerTestInteractionWithEnemiesWithsetup.EnemyMoveOutofRange" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="ClassTests.TowerTestInteractionWithEnemiesWithsetup.EnemyThatDiesWithinRangeOfTwoTowersGetsRemovedFromBothTowerLists" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="ClassTests.TowerTestInteractionWithEnemiesWithsetup.MoveBothEnemyOutofRange" executed="True" result="Success" success="True" time="0.016" asserts="5" />
                  <test-case name="ClassTests.TowerTestInteractionWithEnemiesWithsetup.MultipleTowersCanAttackSingleEnemy" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="ClassTests.TowerTestInteractionWithEnemiesWithsetup.TowerAttacksAnEnemyInItsRange" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="ClassTests.TowerTestInteractionWithEnemiesWithsetup.TowerDoesNotAttackEnemyOutsideItsRange" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="ClassTests.TowerTestInteractionWithEnemiesWithsetup.TowerStopsAttackingEnemyOnceItMovesOutsideOfRange" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="TowerTests" executed="True" result="Success" success="True" time="0.031" asserts="0">
                <results>
                  <test-case name="ClassTests.TowerTests.testInit" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.TowerTests.testTowerThrowsExceptioOnNegativeCost" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="ClassTests.TowerTests.testTowerThrowsExceptioOnNegativeDamage" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="ClassTests.TowerTests.testTowerThrowsExceptioOnNegativeHealth" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="ClassTests.TowerTests.testTowerThrowsExceptioOnNegativeRange" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="ClassTests.TowerTests.testTowerThrowsExceptioOnNullArea" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="ClassTests.TowerTests.testTowerThrowsExceptioOnZeroCost" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="ClassTests.TowerTests.testTowerThrowsExceptioOnZeroDamage" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="ClassTests.TowerTests.testTowerThrowsExceptioOnZeroHealth" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="ClassTests.TowerTests.testTowerThrowsExceptioOnZeroRange" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="ClassTests.TowerTests.TowerAddsEnemySuccessfully" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.TowerTests.towerHasCorrectAttackDamageWhenInitialized" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.TowerTests.towerHasCorrectCostWhenInitialized" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.TowerTests.towerHasCorrectHealthAfterModified" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.TowerTests.towerHasCorrectHealthWhenInitialized" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.TowerTests.towerHasCorrectRangeWhenInitialized" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="TowerTestsInteractionWithEnemies" executed="True" result="Success" success="True" time="0.000" asserts="0">
                <results>
                  <test-case name="ClassTests.TowerTestsInteractionWithEnemies.testTowerChangesTarget" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="ClassTests.TowerTestsInteractionWithEnemies.testTowerUpdatesEnemiesList" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.TowerTestsInteractionWithEnemies.testTwoTowerswithTwoEnemies" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="WaveTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="ClassTests.WaveTest.WaveInitializes" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.WaveTest.WaveReturnsAnEnemy" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.WaveTest.WaveReturnsMultipleEnemy" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="ClassTests.WaveTest.WaveReturnsUniqueEnemies" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="ClassTests.WaveTest.WaveThrowsOn0Count" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="ClassTests.WaveTest.WaveThrowsOnNegativeCount" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="ClassTests.WaveTest.WaveThrowsOnNullEnemy" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>